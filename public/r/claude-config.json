{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "claude-config",
  "type": "registry:lib",
  "title": "Claude Code Configuration",
  "author": "Abstract Foundation (https://build.abs.xyz)",
  "description": "Claude Code project instructions and MCP server configuration optimized for Abstract ecosystem development with AGW, wagmi, and Next.js",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/lib/.claude/CLAUDE.md",
      "content": "# CLAUDE.md\n\nThis file provides guidance to Claude Code when working with code in this Abstract ecosystem project.\n\n## Project Overview\n\nAGW Reusables is a collection of components and utilities for building web3 applications with Abstract Global Wallet (AGW) on Abstract. It is built on top of the shadcn/ui package which uses Tailwind for styling and is powered by the shadcn registry.\n\n## Abstract & Web3 Development\n\n### Abstract Blockchain\nAbstract is a Layer 2 (L2) network built on top of Ethereum, designed to securely power consumer-facing blockchain applications at scale with low fees and fast transaction speeds.\n\n- `abstract` is the mainnet chain available in the @/config/chain.ts file\n- `abstractTestnet` is the testnet chain available in the @/config/chain.ts file\n\n### Abstract Global Wallet (AGW)\nAbstract Global Wallet (AGW) is a cross-application smart contract wallet that users can create to interact with any application built on Abstract, powered by native account abstraction. AGW is integrated via hooks from `@abstract-foundation/agw-react` and utilities from `@abstract-foundation/agw-client` packages.\n\n### Web3 Development Priority Order\nWhen building on-chain functionality, consider in this order:\n\n1. Is there an Abstract Global Wallet library hook from the `@abstract-foundation/agw-react` package?\n2. Is there a function from the `@abstract-foundation/agw-client` package for blockchain interaction?\n3. Are there built-in Wagmi hooks that can accomplish this? (AGW is compatible with all Wagmi hooks such as `useAccount()`, `useBalance()`, `useContractRead()`, `useContractWrite()`, `useSendTransaction()`, `useSignMessage()`, `useSignTransaction()`, `useSignTypedData()`, `useSwitchChain()`, `useWaitForTransactionReceipt()`, etc.)\n4. Can we use the Viem clients installed in @/config/viem-clients.ts?\n\n### Wagmi, Viem, and ZKsync\n- Viem documentation specific to Abstract: https://viem.sh/zksync/\n- AGW libraries work seamlessly with Viem and Wagmi\n- All hooks and functions work with `abstract` and `abstractTestnet` chains\n\n### Troubleshooting\nIf we run into issues related to \"must be called within a wagmi provider\", it likely means the user has not properly wrapped their application in the `AGWProvider` component, which includes the `WagmiProvider` and `QueryClientProvider`.\n\n## Installation & Setup\n\nFollow the steps below to start using AGW Reusables:\n\n1. **Setup your project**\nCreate a new project or configure an existing one using the shadcn init command:\n```bash\npnpm dlx shadcn@latest init\n```\n\n2. **Install the AGW Provider**\nInstall the required wrapper component:\n```bash\npnpm dlx shadcn@latest add \"https://build.abs.xyz/r/agw-provider.json\"\n```\n\n3. **Wrap your application**\nWrap your application in the installed component inside app/layout.tsx:\n```tsx\nimport { NextAbstractWalletProvider } from \"@/components/agw-provider\";\nimport { Toaster } from \"@/components/ui/sonner\";\nimport \"./globals.css\";\n \nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <NextAbstractWalletProvider>\n        <body>\n          {children}\n          <Toaster />\n        </body>\n      </NextAbstractWalletProvider>\n    </html>\n  );\n}\n```\n\n## Using Components\n\n### AGW Components\nImport components from the ui directory using the configured aliases:\n\n```tsx\n\"use client\"\n\nimport { ConnectWalletButton } from \"@/components/connect-wallet-button\"\n\nexport default function ConnectWalletButtonDemo() {\n  return (\n    <div className=\"flex justify-center\">\n      <ConnectWalletButton />\n    </div>\n  )\n}\n```\n\n### Shadcn/UI Components\nImport components from the ui directory using the configured aliases:\n\n```tsx\nimport { Button } from \"@/components/ui/button\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\n```\n\nExample usage:\n```tsx\n<Button variant=\"outline\">Click me</Button>\n\n<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>\n```\n\n## Installing Additional Components\n\n### AGW Components\nTo install additional components, use the Shadcn CLI:\n\n```bash\npnpm dlx shadcn@latest add \"https://build.abs.xyz/r/connect-wallet-button.json\"\n```\n\nSome commonly used components are:\n- connect-wallet-button\n- siwe-button\n- onboarding-dialog\n- session-keys\n- abstract-profile\n- abstract-app-voting\n- nft-card\n- abstract-contracts\n- cursor-ai-config\n- claude-config\n- use-optimistic-write-contract\n\n### Shadcn/UI Components\nMany more components are available but not currently installed. You can view the complete list at https://ui.shadcn.com/r\n\nTo install additional components, use the Shadcn CLI:\n\n```bash\npnpm dlx shadcn@latest add [component-name]\n```\n\nFor example, to add the Accordion component:\n```bash\npnpm dlx shadcn@latest add accordion\n```\n\nNote: `npx shadcn-ui@latest` is deprecated, use `npx shadcn@latest` instead\n\nSome commonly used components are:\n- Accordion\n- Alert\n- AlertDialog\n- AspectRatio\n- Avatar\n- Calendar\n- Checkbox\n- Collapsible\n- Command\n- ContextMenu\n- DataTable\n- DatePicker\n- Dropdown Menu\n- Form\n- Hover Card\n- Menubar\n- Navigation Menu\n- Popover\n- Progress\n- Radio Group\n- ScrollArea\n- Select\n- Separator\n- Sheet\n- Skeleton\n- Slider\n- Switch\n- Table\n- Textarea\n- Toast\n- Toggle\n- Tooltip\n\n## Component Styling\n\nThis project uses the \"new-york\" style variant with the \"neutral\" base color and CSS variables for theming, as configured in `components.json`.\n\n## Development Guidelines\n\n- Follow existing patterns in the codebase\n- Use TypeScript strict mode\n- Implement proper error handling and loading states\n- Ensure components are accessible and responsive\n- Always use pnpm for commands",
      "type": "registry:lib",
      "target": "CLAUDE.md"
    },
    {
      "path": "registry/new-york/lib/.claude/settings.json",
      "content": "{\n  \"permissions\": {\n    \"allow\": [\n      \"mcp__abstract__search\"\n    ],\n    \"deny\": []\n  },\n  \"enableAllProjectMcpServers\": true\n}",
      "type": "registry:lib",
      "target": ".claude/settings.json"
    }
  ]
}
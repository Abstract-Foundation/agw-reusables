{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "nft-card",
  "type": "registry:component",
  "title": "NFT Card",
  "description": "A single NFT card component that displays an NFT with image, name, collection, and balance",
  "dependencies": [],
  "registryDependencies": [
    "card",
    "badge",
    "aspect-ratio"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/nft-card/nft-card.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Card } from \"@/registry/new-york/ui/card\";\nimport { Badge } from \"@/registry/new-york/ui/badge\";\nimport { AspectRatio } from \"@/registry/new-york/ui/aspect-ratio\";\nimport type { NFT } from \"@/types/nfts\";\n\ninterface NFTCardProps {\n  nft: NFT;\n  showCollectionName?: boolean;\n  className?: string;\n}\n\n/**\n * NFT Card - A single NFT card component that displays an NFT with image, name, collection, and balance\n */\nexport function NFTCard({\n  nft,\n  showCollectionName = true,\n  className,\n}: NFTCardProps) {\n  const imageUrl = nft.imageMediumUrl || nft.imageLargeUrl || nft.imageUrl;\n  const hasImage = !!imageUrl;\n  const collectionName = nft.collection?.name || nft.contract?.name;\n\n  return (\n    <Card\n      className={cn(\n        \"group overflow-hidden transition-shadow hover:shadow-md p-0 gap-1\",\n        className\n      )}\n    >\n      <div className=\"relative\">\n        <AspectRatio ratio={1} className=\"bg-muted overflow-hidden\">\n          {hasImage ? (\n            <img\n              src={imageUrl}\n              alt={nft.name || \"NFT\"}\n              className=\"object-cover absolute inset-0 w-full h-full transition-transform duration-300 group-hover:scale-105\"\n              loading=\"lazy\"\n              onError={(e) => {\n                const target = e.target as HTMLImageElement;\n                target.style.display = \"none\";\n                const fallback = target.nextElementSibling as HTMLElement;\n                if (fallback) fallback.style.display = \"flex\";\n              }}\n            />\n          ) : null}\n          <div\n            className={cn(\n              \"absolute inset-0 flex items-center justify-center bg-muted text-muted-foreground\",\n              hasImage && \"hidden\"\n            )}\n          >\n            No Image\n          </div>\n        </AspectRatio>\n\n        {nft.balance && parseInt(nft.balance) > 1 && (\n          <Badge variant=\"secondary\" className=\"absolute top-2 right-2 text-xs\">\n            Ã—{nft.balance}\n          </Badge>\n        )}\n      </div>\n\n      <div className=\"p-2\">\n        <h3 className=\"font-medium text-sm truncate\" title={nft.name}>\n          {nft.name || `#${nft.tokenId}`}\n        </h3>\n\n        {showCollectionName && collectionName && (\n          <p\n            className=\"text-xs text-muted-foreground truncate mt-1\"\n            title={collectionName}\n          >\n            {collectionName}\n          </p>\n        )}\n      </div>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/nft-card/hooks/use-nfts.ts",
      "content": "import { useQuery } from \"@tanstack/react-query\";\nimport type { NFT } from \"@/types/nfts\";\n\ninterface NFTsResponse {\n  nfts: NFT[];\n  nextPage?: string;\n}\n\nasync function fetchUserNFTs(address: string): Promise<NFTsResponse> {\n  if (!address) {\n    throw new Error(\"Address is required\");\n  }\n\n  const response = await fetch(`/api/user-nfts/${address}`);\n\n  if (!response.ok) {\n    throw new Error(`Failed to fetch NFTs: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  console.log(data);\n\n  return data;\n}\n\nexport function useNFTs(address: string, enabled = true) {\n  return useQuery({\n    queryKey: [\"nfts\", address],\n    queryFn: () => fetchUserNFTs(address),\n    enabled: enabled && !!address,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n    retry: 3,\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n  });\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "app/api/user-nfts/[address]/route.ts",
      "content": "import { NextRequest, NextResponse } from \"next/server\";\n\nconst ABSTRACT_PORTAL_API_URL = \"https://backend.portal.abs.xyz/api\";\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ address: string }> }\n) {\n  try {\n    const { address } = await params;\n\n    // Validate the address parameter\n    if (!address) {\n      return NextResponse.json(\n        { error: \"Address parameter is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Fetch NFT data from Abstract Portal API\n    const response = await fetch(\n      `${ABSTRACT_PORTAL_API_URL}/user/${address}/wallet/v2/nfts`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"User-Agent\": \"agw-reusables/1.0\",\n        },\n        // Add cache control\n        next: { revalidate: 300 }, // Cache for 5 minutes\n      }\n    );\n\n    // Handle non-200 responses\n    if (!response.ok) {\n      if (response.status === 404) {\n        return NextResponse.json(\n          { error: \"NFT data not found\" },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json(\n        { error: \"Failed to fetch NFT data\" },\n        { status: response.status }\n      );\n    }\n\n    const nftData = await response.json();\n\n    // Return the NFT data with appropriate headers\n    return NextResponse.json(nftData, {\n      headers: {\n        \"Cache-Control\": \"public, s-maxage=300, stale-while-revalidate=600\",\n      },\n    });\n  } catch (error) {\n    console.error(\"Error fetching NFT data:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}",
      "type": "registry:lib",
      "target": "app/api/user-nfts/[address]/route.ts"
    },
    {
      "path": "types/nfts.ts",
      "content": "export interface NFTAttribute {\n  trait_type: string;\n  value: string | number;\n}\n\nexport interface NFTContract {\n  address: string;\n  name: string;\n  symbol: string;\n  type: \"ERC721\" | \"ERC1155\";\n  openSeaSlug?: string;\n  description?: string;\n  imageUrl?: string;\n  externalUrl?: string;\n}\n\nexport interface NFTCollection {\n  id: string;\n  name: string;\n  description?: string;\n  imageUrl?: string;\n  floorAskPrice?: {\n    amount: {\n      decimal: number;\n      usd: number;\n    };\n    currency: {\n      contract: string;\n      name: string;\n      symbol: string;\n      decimals: number;\n    };\n  };\n}\n\nexport interface NFTMedia {\n  small?: string;\n  medium?: string;\n  large?: string;\n}\n\nexport interface NFTLastSale {\n  orderSource: string;\n  fillSource?: string;\n  timestamp: number;\n  price?: {\n    amount: {\n      decimal: number;\n      usd: number;\n    };\n    currency: {\n      contract: string;\n      name: string;\n      symbol: string;\n      decimals: number;\n    };\n  };\n}\n\nexport interface NFT {\n  id: string;\n  chain: string;\n  contract: {\n    type: \"ERC721\" | \"ERC1155\";\n    name: string;\n    symbol: string;\n  };\n  contractAddress: string;\n  symbol: string;\n  tokenId: string;\n  name: string;\n  description?: string;\n  imageUrl?: string;\n  imageSmallUrl?: string;\n  imageMediumUrl?: string;\n  imageLargeUrl?: string;\n  videoUrl?: string | null;\n  videoThumbnailUrl?: string | null;\n  audioUrl?: string | null;\n  modelUrl?: string | null;\n  otherUrl?: string | null;\n  externalUrl?: string | null;\n  metadata?: {\n    attributes: NFTAttribute[];\n    imageOriginalUrl?: string | null;\n    animationOriginalUrl?: string | null;\n  };\n  metadataUrl?: string;\n  collection: {\n    id: string;\n    name: string;\n    description?: string;\n    imageUrl?: string;\n    externalUrl?: string | null;\n    twitterUsername?: string | null;\n    discordUrl?: string | null;\n    instagramUsername?: string | null;\n    isNSFW: boolean;\n  };\n  lastSale?: {\n    currency: {\n      contract: string;\n      name: string;\n      symbol: string;\n      decimals: number;\n    };\n    amount: {\n      raw: string;\n      decimal: number;\n      usd: number;\n      native: number;\n    };\n  } | null;\n  floorAsk?: {\n    currency: {\n      contract: string;\n      name: string;\n      symbol: string;\n      decimals: number;\n    };\n    amount: {\n      raw: string;\n      decimal: number;\n      usd: number;\n      native: number;\n    };\n  };\n  balance: string;\n  isPinned: boolean;\n  isHidden: boolean;\n}\n\n\n",
      "type": "registry:lib",
      "target": "types/nfts.ts"
    }
  ]
}
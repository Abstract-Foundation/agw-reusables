{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cursor-ai-config",
  "type": "registry:lib",
  "title": "Cursor AI Configuration",
  "description": "Cursor project rules and MCP configuration optimized for Abstract ecosystem development with AGW, wagmi, and Next.js",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/lib/.cursor/rules/abstract.mdc",
      "content": "---\ndescription: Use Abstract and Abstract Global Wallet for any web3 development\nalwaysApply: true\n---\n\n# Abstract\n\nAbstract is a Layer 2 (L2) network built on top of Ethereum, designed to securely power consumer-facing blockchain applications at scale with low fees and fast transaction speeds.\n\n- `abstract` is the mainnet chain available in the @/config/chain.ts file\n- `abstractTestnet` is the testnet chain available in the @/config/chain.ts file\n\nAbstract Global Wallet (AGW) is a cross-application smart contract wallet that users can create to interact with any application built on Abstract, powered by native account abstraction.\n\nOur application uses Abstract for the blockchain and Abstract Global Wallet (AGW) for the wallet.\n\nFor any information you need clarification on, you have access to the \"Abstract\" MCP server to search the Abstract documentation for any information you need.\n\nAGW is integrated into our application via the hooks from `@abstract-foundation/agw-react` and utilities from the `@abstract-foundation/agw-client` packages.\n\nIf we run into issues related to \"must be called within a wagmi provider\", it likely means the user has not properly wrapped their application in the `AGWProvider` component, which is the 2nd step in the installation process (it includes the `WagmiProvider` and `QueryClientProvider`).\n\n\n## Wagmi, Viem, and ZKsync\n\nViem documentation specific to Abstract is available at https://viem.sh/zksync/\n\nThe AGW libraries work seamlessly with Viem and Wagmi, and all of the hooks and functions will work with the `abstract` and `abstractTestnet` chains using the connected Abstract Global Wallet.\n\nYou should consider, in the following order, when building out on-chain functionality:\n\n1. Is there an Abstract Global Wallet library hook for this that can be used from the `@abstract-foundation/agw-react` package? (If you are not sure, search the Abstract MCP server).\n2. Is there a function available from the `@abstract-foundation/agw-client` package that can be used to interact with the blockchain? (If you are not sure, search the Abstract MCP server).\n3. Is there built-in hooks in Wagmi that can accomplish this? Abstract Global Wallet is compatible with all Wagmi hooks such as `useAccount()`, `useBalance()`, `useContractRead()`, `useContractWrite()`, `useSendTransaction()`, `useSignMessage()`, `useSignTransaction()`, `useSignTypedData()`, `useSwitchChain()`, `useWaitForTransactionReceipt()`, etc.\n4. Can we use the Viem clients installed in @/config/viem-clients.ts to accomplish this?\n",
      "type": "registry:lib",
      "target": ".cursor/rules/abstract.mdc"
    },
    {
      "path": "registry/new-york/lib/.cursor/rules/agw-reusables.mdc",
      "content": "---\ndescription: Use Abstract and Abstract Global Wallet for any web3 development\nalwaysApply: true\n---\n\n# Abstract\n\nAGW Reusables is a collection of components and utilities for building web3 applications with Abstract Global Wallet (AGW) on Abstract.\n\nIt is built on top of the shadcn/ui package which uses tailwind for styling.\n\nIt is powered by the shdacn registry, meaning you can install components and utilities from the registry as described in @shadcn.mdc.\n\n## Installation\n\nThe user should have installed and configured the agw-provider wrapper component as described in the instructions below:\n\nFollow the steps below to start using AGW Reusables.\n\n1. Setup your project\n\nCreate a new project or configure an existing one using the shadcn init command:\n\n```bash\npnpm dlx shadcn@latest init\n```\n2. Install the AGW Provider\nInstall the required wrapper component, the AGW Provider:\n\npnpm dlx shadcn@latest add \"https://build.abs.xyz/r/agw-provider.json\"\n\n3. Wrap your application\n\nWrap your application in the installed component inside app/layout.tsx.\n\n```tsx title=\"app/layout.tsx\"\nimport { NextAbstractWalletProvider } from \"@/components/agw-provider\";\nimport { Toaster } from \"@/components/ui/sonner\";\nimport \"./globals.css\";\n \nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <NextAbstractWalletProvider>\n        <body>\n          {children}\n          <Toaster />\n        </body>\n      </NextAbstractWalletProvider>\n    </html>\n  );\n}\n```\n\n\n## Using Components\n\nImport components from the ui directory using the configured aliases:\n\n```tsx\n\"use client\"\n\nimport { ConnectWalletButton } from \"@/components/connect-wallet-button\"\n\nexport default function ConnectWalletButtonDemo() {\n  return (\n    <div className=\"flex justify-center\">\n      <ConnectWalletButton />\n    </div>\n  )\n}\n```\n\n## Installing Additional Components\n\nThere are several available components, hooks, config, services, and utilities that can be installed from the registry.\n\nTo install additional components, use the Shadcn CLI:\n\n```bash\npnpm dlx shadcn@latest add \"https://build.abs.xyz/r/connect-wallet-button.json\"\n```\n\nSome commonly used components are:\n\n- connect-wallet-button\n- siwe-button\n- onboarding-dialog\n- session-keys\n- abstract-profile\n- abstract-app-voting\n- nft-card\n- abstract-contracts\n- cursor-ai-config\n- claude-config\n- use-optimistic-write-contract\n\n## Component Styling\n\nThis project uses the \"new-york\" style variant with the \"neutral\" base color and CSS variables for theming, as configured in `components.json`.",
      "type": "registry:lib",
      "target": ".cursor/rules/agw-reusables.mdc"
    },
    {
      "path": "registry/new-york/lib/.cursor/rules/session-keys.mdc",
      "content": "---\ndescription: If using session keys to create a user experience for transactions without transaction popups.\nalwaysApply: false\n---\n\nNote: this is not *always* applicable as not all applications want/need to use session keys.\n\nSession keys are temporary keys that are approved to execute a pre-defined set of actions on behalf of an Abstract Global Wallet without requiring the owner to sign each transaction.\n\nThey unlock seamless user experiences by executing transactions behind the scenes without interrupting the user with popups; powerful for games, mobile apps, and more.\n​\n## How session keys work\n\nApplications can prompt users to approve the creation of a session key for their Abstract Global Wallet. This session key specifies:\n\n- A scoped set of actions that the session key is approved to execute.\n- A specific EOA account, the signer, that is permitted to execute the scoped actions.\n\nIf the user approves the session key creation, the signer account can submit any of the actions within the defined scope without requiring user confirmation; until the session key expires or is revoked.\n\n## Session Key Security\n\nIMPORTANT: Read and apply the following security best practices for session keys. Do not hallucinate or make up information related to session keys. Only use the information provided in this document.\n\nWhile session keys unlock new ways to create engaging consumer experiences, improper or malicious implementations of session keys create new ways for bad actors to steal assets from users.\n\nSession keys are permissionless on testnet, however, mainnet enforces several security measures to protect users. This document outlines the security restrictions and best practices for using session keys.\n\nSession keys are restricted to a whitelist of allowed policies on Abstract Mainnet through the Session Key Policy Registry contract, which manages a whitelist of approved session keys.\n\nApplications must pass a security review before being added to the registry to enable the use of session keys for their policies.\n\nSession key policies that request approve and/or setApprovalForAll functions must be passed with additional constraints that restrict the approval to a specific contract address.\n\n\nFor example, the following policy must include a constraints array that restricts the approval to a specific contract address, or will be rejected with “Unconstrained token approval/transfer destination in call policy.”\n\n```\n{\n  target: \"0x...\",\n  selector: toFunctionSelector(\"approve(address, uint256)\"),\n\n  // Must include a constraints array that restricts the approval to a specific contract address\n  constraints: [\n    {\n      condition: ConstraintCondition.Equal,\n      index: 0n,\n      limit: LimitType.Unlimited,\n      refValue: encodeAbiParameters(\n        [{ type: \"address\" }],\n        [\"0x-your-contract-address\"]\n      ),\n    },\n  ],\n}\n```\n​\nSession keys specify a signer account; an EOA that is permitted to perform the actions specified in the session configuration. Therefore, the private key of the signer(s) you create are SENSITIVE VALUES!\n\nExposing the signer private key enables attackers to execute any of the actions specified in a session configuration for any AGW that has approved a session key with that signer’s address.\n\n```\nawait agwClient.createSession({\n  session: {\n    signer: sessionSigner.address, // <--- The session key signer account\n    // ...\n  },\n});\n```\n​\n## Using Session Keys\n\nThe recommended, secure approach to using session keys is installing the `session-keys` component and using the `SessionKeyButton` component to handle the complete lifecycle of the session key.\n\nIt includes several security features to encrypt the session key and signer account private key, and to validate the session key before use.\n\n## Session Key Policies\n\nSession key policies are defined in the `session-key-policies.ts` file.\n\nThey are used to define the contracts and functions that the session key is allowed to interact with.\n\nThese policies MUST comply with the requirements outlined in the @session-keys.mdc file.\n",
      "type": "registry:lib",
      "target": ".cursor/rules/session-keys.mdc"
    },
    {
      "path": "registry/new-york/lib/.cursor/rules/shadcn.mdc",
      "content": "---\ndescription: \"Use shadcn/ui components as needed for any UI code\"\npatterns: \"*.tsx\"\n---\n\n# Shadcn UI Components\n\nThis project uses @shadcn/ui for UI components. These are beautifully designed, accessible components that you can copy and paste into your apps.\n\n## Finding and Using Components\n\nComponents are available in the `src/components/ui` directory, following the aliases configured in `components.json`\n\n## Using Components\n\nImport components from the ui directory using the configured aliases:\n\n```tsx\nimport { Button } from \"@/components/ui/button\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\n```\n\nExample usage:\n\n```tsx\n<Button variant=\"outline\">Click me</Button>\n\n<Card>\n  <CardHeader>\n    <CardTitle>Card Title</CardTitle>\n    <CardDescription>Card Description</CardDescription>\n  </CardHeader>\n  <CardContent>\n    <p>Card Content</p>\n  </CardContent>\n  <CardFooter>\n    <p>Card Footer</p>\n  </CardFooter>\n</Card>\n```\n\n## Installing Additional Components\n\nMany more components are available but not currently installed. You can view the complete list at https://ui.shadcn.com/r\n\nTo install additional components, use the Shadcn CLI:\n\n\n```bash\npnpm dlx shadcn@latest add [component-name]\n```\n\nFor example, to add the Accordion component:\n\n```bash\npnpm dlx shadcn@latest add accordion\n```\n\nNote: `npx shadcn-ui@latest` is deprecated, use `npx shadcn@latest` instead\n\nSome commonly used components are\n\n- Accordion\n- Alert\n- AlertDialog\n- AspectRatio\n- Avatar\n- Calendar\n- Checkbox\n- Collapsible\n- Command\n- ContextMenu\n- DataTable\n- DatePicker\n- Dropdown Menu\n- Form\n- Hover Card\n- Menubar\n- Navigation Menu\n- Popover\n- Progress\n- Radio Group\n- ScrollArea\n- Select\n- Separator\n- Sheet\n- Skeleton\n- Slider\n- Switch\n- Table\n- Textarea\n- Toast\n- Toggle\n- Tooltip\n\n## Component Styling\n\nThis project uses the \"new-york\" style variant with the \"neutral\" base color and CSS variables for theming, as configured in `components.json`.",
      "type": "registry:lib",
      "target": ".cursor/rules/shadcn.mdc"
    },
    {
      "path": "registry/new-york/lib/.cursor/mcp.json",
      "content": "{\n  \"mcpServers\": {\n    \"Abstract\": {\n      \"name\": \"Abstract\",\n      \"url\": \"https://docs.abs.xyz/mcp\",\n      \"headers\": {}\n    }\n  }\n}",
      "type": "registry:lib",
      "target": ".cursor/mcp.json"
    }
  ]
}